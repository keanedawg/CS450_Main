When your assignment is complete, please answer the questions in this text file and upload it to I-Learn.

1. Please provide the URL of your public GitHub repository.
https://github.com/keanedawg/CS450_Main/blob/master/KNearestNeighbor.py

2. Briefly describe your overall approach to the task and highlight the most difficult part of this assignment.

I struggled to understand how a KDTree works and could be used to help implement NearestNeighbor. I thought this video was really helpful (https://www.coursera.org/lecture/algorithms-part1/kd-trees-Yionu).

3. Briefly describe your process for handling numeric data on different scales (i.e., normalizing).

I added a paramenter "n_neighbors" when creating the classifier to allow users to specify the number of neighbors they want. From there, I could test multiple K values to see how each affected the accuracy.

4. Describe your results for the Iris data set. (For example, what level of accuracy did you see for different values of K?

As long as the K value was low, the accuracy was almost unchanged. However, once K became very large (generally K > 30), the amount of errors started to go up. In general, as K approaches infiniti, the inaccuracy increases.

5. How did your implementation compare to existing implementations?

In terms of accuracy, both worked at exactly the same level. I think this makes sense though. After all, the K nearest neighbors should always be the same regardless of the implementation.

6. Describe anything you did to go above and beyond the minimum standard requirements.

Along with meeting the requirements using a brute-force approach (creating an array of distances and sorting to find the minimum K distances), I also learned how a KDTree can be used in this algorithm (https://www.coursera.org/lecture/algorithms-part1/kd-trees-Yionu).

I added a KDTree implementation using the SKLearn KDTree. I did not write my own KDTree however.

7. Please select the category you feel best describes your assignment:
A - Some attempt was made
B - Developing, but significantly deficient
C - Slightly deficient, but still mostly adequate
D - Meets requirements
E - Shows creativity and excels above and beyond requirements

E

8. Provide a brief justification (1-2 sentences) for selecting that category.

I met the requirements twice. Once with a bruteforce approach and again by using a KDTree.
